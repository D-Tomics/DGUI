package engine.ui.gui.text.font;

import engine.ui.gui.text.meshCreator.TextMeshCreator;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class FontFile {

    private static final int PAD_TOP = 0, PAD_LEFT = 1, PAD_BOTTOM = 2, PAD_RIGHT = 3;

    private File fontFile;
    private BufferedReader reader;

    private int[] padding;
    private int paddingWidth;
    private int paddingHeight;

    private float desiredPadding;
    /*private float verticalPerPixelSize;
    private float horizontalPerPixelSize;*/

    private float spaceWidth;
    private float lineHeight;
    private float imageWidth;

    private Map<String, String> parameters = new HashMap<>();
    private Map<Integer, FontChar> characterMap = new HashMap<>();

    public FontFile(String file,float desiredPadding) {
        this.fontFile = new File(file);
        this.desiredPadding = desiredPadding;
        loadData();
    }

    public FontChar getFontChar(int id) {
        return characterMap.get(id);
    }

    public Map<Integer, FontChar> getCharacters() {
        return characterMap;
    }

    public float getSpaceWidth() {
        return spaceWidth;
    }
    public float getLineHeight() { return lineHeight; }

    private void loadData() {
        openFile();
        loadPadding();
        loadLineHeights();
        loadCharacters();
        closeFile();
    }

    private void loadPadding() {
        processLine();
        padding = getValuesOfVariable("padding");
        paddingWidth = padding[PAD_LEFT] + padding[PAD_RIGHT];
        paddingHeight = padding[PAD_TOP] + padding[PAD_BOTTOM];
    }

    private void loadLineHeights() {
        processLine();
        this.lineHeight = getValueOfVariable("lineHeight") - paddingHeight;
        this.imageWidth = getValueOfVariable("scaleW");
        //updatePerPixelSizes();
    }

    /*private void updatePerPixelSizes() {
        verticalPerPixelSize =  LINE_HEIGHT / lineHeight;
        horizontalPerPixelSize = verticalPerPixelSize / Window.getMonitorAspectRatio();
    }*/

    private int getValueOfVariable(String name) {
        return Integer.parseInt(parameters.get(name));
    }

    private int[] getValuesOfVariable(String name) {
        String[] stringValues = parameters.get(name).split(",");
        int[] values = new int[stringValues.length];
        for(int i = 0; i < values.length; i++)
            values[i] = Integer.parseInt(stringValues[i]);
        return values;
    }

    private void loadCharacters() {
        String line = " ";
        while((line = processLine()) != null) {
            if(line.startsWith("char ")) {
                FontChar c = loadCharacter();
                if(c != null)
                    characterMap.put(c.getId(),c);
            }
        }
    }

    private FontChar loadCharacter() {
        int id = getValueOfVariable("id");
        if(id == TextMeshCreator.SPACE_ASCII) {
            this.spaceWidth = (getValueOfVariable("xadvance") - paddingWidth); //* horizontalPerPixelSize;
        }
        float xTex = (getValueOfVariable("x") + (padding[PAD_LEFT] - desiredPadding)) / imageWidth;
        float yTex = (getValueOfVariable("y") + (padding[PAD_TOP] - desiredPadding)) / imageWidth;

        float width = getValueOfVariable("width") - (paddingWidth  - 2 * desiredPadding);
        float height = getValueOfVariable("height") - (paddingHeight - 2 * desiredPadding);

        float quadWidth = width;// * horizontalPerPixelSize;
        float quadHeight = height;// * verticalPerPixelSize;

        float xMaxTexCoord = xTex + width / imageWidth;
        float yMaxTexCoord = yTex + height / imageWidth;

        float xOffset = (getValueOfVariable("xoffset") + padding[PAD_LEFT] - desiredPadding);// * horizontalPerPixelSize;
        float yOffset = (getValueOfVariable("yoffset") + padding[PAD_TOP] - desiredPadding);// * verticalPerPixelSize;

        float xAdvance = (getValueOfVariable("xadvance") - paddingWidth) ;//* horizontalPerPixelSize;

        return new FontChar(id,xTex,yTex,xMaxTexCoord,yMaxTexCoord,xOffset, yOffset,xAdvance,quadWidth,quadHeight);
    }


    private void openFile() {
        try {
            reader = new BufferedReader(new FileReader(fontFile));
        } catch (FileNotFoundException e) {
            System.out.println("could not open the fontFile "+fontFile.getName());
        }
    }

    private void closeFile() {
        try {
            reader.close();
        } catch (IOException e) {
            System.out.println("closing fontFile "+fontFile.getName()+" caused an Exception");
        }
    }


    private String processLine() {
        try {
            parameters.clear();
            String line = reader.readLine();
            if(line == null) return null;
            String[] types = line.split(" ");
            for(String type : types) {
                String[] args = type.split("=");
                if(args.length == 2) {
                    parameters.put(args[0],args[1]);
                }
            }
            return line;
            } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

}
